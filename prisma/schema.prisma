generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified") @db.Timestamptz
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  teamMemberships TeamMembership[]
  activities      Activity[]

  @@map("users")
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime  @db.Timestamptz
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  teamMemberships TeamMembership[]
  activities      Activity[]

  @@map("teams")
}

model TeamMembership {
  id        String             @id @default(cuid())
  userId    String             @map("user_id")
  teamId    String             @map("team_id")
  role      TeamMembershipRole @default(OWNER)
  createdAt DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime?          @updatedAt @map("updated_at") @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@map("user_teams")
}

model Activity {
  id          String    @id @default(cuid())
  name        String
  description String?
  teamId      String    @map("team_id")
  userId      String    @map("user_id")
  completedAt DateTime? @map("completedAt") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  team Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Task Task[]

  @@index([userId])
  @@index([teamId])
  @@index([deletedAt])
  @@index([completedAt])
  @@map("activities")
}

model Task {
  id          String    @id @default(cuid())
  name        String
  activityId  String    @map("activity_id")
  completedAt DateTime? @map("completed_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  activity    Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]

  @@index([activityId])
  @@index([deletedAt])
  @@index([completedAt])
  @@map("tasks")
}

model TimeEntry {
  id        String    @id @default(cuid())
  taskId    String    @map("task_id")
  startedAt DateTime  @map("started_at") @db.Timestamptz
  stoppedAt DateTime? @map("stopped_at") @db.Timestamptz
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("time_entries")
}

enum TeamMembershipRole {
  OWNER
}
